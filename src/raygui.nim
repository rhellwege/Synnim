# GENERATED BY NAYLIB TOOLS
import std/os, strutils, strformat, raymath
# from raylib import Vector2, Vector3, Color, Rectangle, Texture2D, Image, GlyphInfo, Font
import raylib
export Vector2, Vector3, Color, Rectangle, Texture2D, Image, GlyphInfo, Font

const rayGuiDir = currentSourcePath().parentDir() / "extern"

{.passC: "-I" & rayGuiDir.}

{.emit: """/*INCLUDESECTION*/
#define GUI_WINDOW_FILE_DIALOG_IMPLEMENTATION
""".}

type
  GuiStyleProp* {.bycopy.} = object ## Style property
    controlId*: uint16
    propertyId*: uint16
    propertyValue*: uint32

  GuiTextAlignment* {.size: sizeof(int32).} = enum
    TextAlignLeft
    TextAlignCenter
    TextAlignRight

  GuiControl* {.size: sizeof(int32).} = enum
    Default
    Label
    Button
    Toggle
    Slider
    ProgressBar
    CheckBox
    ComboBox
    DropDownBox
    TextBox
    ValueBox
    Spinner
    ListView
    ColorPicker
    ScrollBar
    StatusBar

  GuiControlProperty* {.size: sizeof(int32).} = enum
    BorderColorNormal
    BaseColorNormal
    TextColorNormal
    BorderColorFocused
    BaseColorFocused
    TextColorFocused
    BorderColorPressed
    BaseColorPressed
    TextColorPressed
    BorderColorDisabled
    BaseColorDisabled
    TextColorDisabled
    BorderWidth
    TextPadding
    TextAlignment
    Reserved
  
  GuiDefaultProperty* {.size: sizeof(int32).} = enum
    TextSize
    TextSpacing
    LineColor
    BackgroundColor
    TextLineSpacing

  GuiState* {.size: sizeof(int32).} = enum 
    StateNormal
    StateFocused
    StatePressed
    StateDisabled

  GuiWindowFileDialogState* {.importc, header: "gui_window_file_dialog.h", bycopy.} = object  
    windowActive*: bool 
    windowBounds*: Rectangle 
    panOffset*: Vector2 
    dragMode*: bool 
    supportDrag*: bool 

    dirPathEditMode*: bool
    dirPathText*: array[1024, char]

    filesListScrollIndex*: int32 
    filesListEditMode*: bool     
    filesListActive*: int32 

    fileNameEditMode*: bool 
    fileNameText*: array[1024, char] 
    SelectFilePressed*: bool  
    CancelFilePressed*: bool 
    fileTypeActive*: int32
    itemFocused*: int32

    dirFiles*: FilePathList
    filterExt*: array[256, char]
    dirPathTextCopy*: array[1024, char]
    fileNameTextCopy*: array[1024, char]

    prevFilesListActive*: int32 
    saveFileMode*: char 

{.push callconv: cdecl, header: "raygui.h".}

proc guiEnable*() {.importc: "GuiEnable".}
  ## Enable gui controls (global state)
proc guiDisable*() {.importc: "GuiDisable".}
  ## Disable gui controls (global state)
proc guiLock*() {.importc: "GuiLock".}
  ## Lock gui controls (global state)
proc guiUnlock*() {.importc: "GuiUnlock".}
  ## Unlock gui controls (global state)
proc guiIsLocked*(): bool {.importc: "GuiIsLocked".}
  ## Check if gui is locked (global state)
proc guiSetAlpha*(alpha: float32) {.importc: "GuiSetAlpha".}
  ## Set gui controls alpha (global state), alpha goes from 0.0f to 1.0f
proc guiSetState*(state: int32) {.importc: "GuiSetState".}
  ## Set gui state (global state)
proc guiGetStatePriv(): int32 {.importc: "GuiGetState".}
  ## Get gui state (global state)
proc guiSetFont*(font: Font) {.importc: "GuiSetFont".}
  ## Set gui custom font (global state)
proc guiGetFont*(): Font {.importc: "GuiGetFont".}
  ## Get gui custom font (global state)
proc guiSetStylePriv(control: int32, property: int32, value: int32) {.importc: "GuiSetStyle".}
  ## Set one style property
proc guiGetStylePriv(control: int32, property: int32): int32 {.importc: "GuiGetStyle".}
  ## Get one style property
proc guiLoadStyle*(fileName: cstring) {.importc: "GuiLoadStyle".}
  ## Load style file over global style variable (.rgs)
proc guiLoadStyleDefault*() {.importc: "GuiLoadStyleDefault".}
  ## Load style default over global style
proc guiEnableTooltip*() {.importc: "GuiEnableTooltip".}
  ## Enable gui tooltips (global state)
proc guiDisableTooltip*() {.importc: "GuiDisableTooltip".}
  ## Disable gui tooltips (global state)
proc guiSetTooltip*(tooltip: cstring) {.importc: "GuiSetTooltip".}
  ## Set tooltip string
proc guiIconText*(iconId: int32, text: cstring): cstring {.importc: "GuiIconText".}
  ## Get text with icon id prepended (if supported)
proc guiSetIconScale*(scale: int32) {.importc: "GuiSetIconScale".}
  ## Set default icon drawing size
proc guiGetIcons*(): var uint32 {.importc: "GuiGetIcons".}
  ## Get raygui icons data pointer
proc guiLoadIcons*(fileName: cstring, loadIconsName: bool): cstringArray {.importc: "GuiLoadIcons".}
  ## Load raygui icons file (.rgi) into internal icons data
proc guiDrawIcon*(iconId: int32, posX: int32, posY: int32, pixelSize: int32, color: Color) {.importc: "GuiDrawIcon".}
  ## Draw icon using pixel size at specified position
proc guiWindowBox*(bounds: Rectangle, title: cstring): int32 {.importc: "GuiWindowBox".}
  ## Window Box control, shows a window that can be closed
proc guiGroupBox*(bounds: Rectangle, text: cstring): int32 {.importc: "GuiGroupBox".}
  ## Group Box control with text name
proc guiLine*(bounds: Rectangle, text: cstring): int32 {.importc: "GuiLine".}
  ## Line separator control, could contain text
proc guiPanel*(bounds: Rectangle, text: cstring): int32 {.importc: "GuiPanel".}
  ## Panel control, useful to group controls
proc guiTabBar*(bounds: Rectangle, text: cstringArray, count: int32, active: var int32): int32 {.importc: "GuiTabBar".}
  ## Tab Bar control, returns TAB to be closed or -1
proc guiScrollPanel*(bounds: Rectangle, text: cstring, content: Rectangle, scroll: var Vector2, view: var Rectangle): int32 {.importc: "GuiScrollPanel".}
  ## Scroll Panel control
proc guiLabel*(bounds: Rectangle, text: cstring): int32 {.importc: "GuiLabel".}
  ## Label control, shows text
proc guiButtonPriv(bounds: Rectangle, text: cstring): int32 {.importc: "GuiButton".}
  ## Button control, returns true when clicked
proc guiLabelButton*(bounds: Rectangle, text: cstring): int32 {.importc: "GuiLabelButton".}
  ## Label button control, show true when clicked
proc guiToggle*(bounds: Rectangle, text: cstring, active: var bool): int32 {.importc: "GuiToggle".}
  ## Toggle Button control, returns true when active
proc guiToggleGroup*(bounds: Rectangle, text: cstring, active: var int32): int32 {.importc: "GuiToggleGroup".}
  ## Toggle Group control, returns active toggle index
proc guiCheckBox*(bounds: Rectangle, text: cstring, checked: var bool): int32 {.importc: "GuiCheckBox".}
  ## Check Box control, returns true when active
proc guiComboBox*(bounds: Rectangle, text: cstring, active: var int32): int32 {.importc: "GuiComboBox".}
  ## Combo Box control, returns selected item index
proc guiDropdownBox*(bounds: Rectangle, text: cstring, active: var int32, editMode: bool): int32 {.importc: "GuiDropdownBox".}
  ## Dropdown Box control, returns selected item
proc guiSpinner*(bounds: Rectangle, text: cstring, value: var int32, minValue: int32, maxValue: int32, editMode: bool): int32 {.importc: "GuiSpinner".}
  ## Spinner control, returns selected value
proc guiValueBox*(bounds: Rectangle, text: cstring, value: var int32, minValue: int32, maxValue: int32, editMode: bool): int32 {.importc: "GuiValueBox".}
  ## Value Box control, updates input text with numbers
proc guiTextBox*(bounds: Rectangle, text: cstring, textSize: int32, editMode: bool): int32 {.importc: "GuiTextBox".}
  ## Text Box control, updates input text
proc guiSlider*(bounds: Rectangle, textLeft: cstring, textRight: cstring, value: var float32, minValue: float32, maxValue: float32): int32 {.importc: "GuiSlider".}
  ## Slider control, returns selected value
proc guiSliderBar*(bounds: Rectangle, textLeft: cstring, textRight: cstring, value: var float32, minValue: float32, maxValue: float32): int32 {.importc: "GuiSliderBar".}
  ## Slider Bar control, returns selected value
proc guiProgressBar*(bounds: Rectangle, textLeft: cstring, textRight: cstring, value: var float32, minValue: float32, maxValue: float32): int32 {.importc: "GuiProgressBar".}
  ## Progress Bar control, shows current progress value
proc guiStatusBar*(bounds: Rectangle, text: cstring): int32 {.importc: "GuiStatusBar".}
  ## Status Bar control, shows info text
proc guiDummyRec*(bounds: Rectangle, text: cstring): int32 {.importc: "GuiDummyRec".}
  ## Dummy control for placeholders
proc guiGrid*(bounds: Rectangle, text: cstring, spacing: float32, subdivs: int32, mouseCell: var Vector2): int32 {.importc: "GuiGrid".}
  ## Grid control, returns mouse cell position
proc guiListView*(bounds: Rectangle, text: cstring, scrollIndex: var int32, active: var int32): int32 {.importc: "GuiListView".}
  ## List View control, returns selected list item index
proc guiListView*(bounds: Rectangle, text: cstringArray, count: int32, scrollIndex: var int32, active: var int32, focus: var int32): int32 {.importc: "GuiListViewEx".}
  ## List View with extended parameters
proc guiMessageBox*(bounds: Rectangle, title: cstring, message: cstring, buttons: cstring): int32 {.importc: "GuiMessageBox".}
  ## Message Box control, displays a message
proc guiTextInputBox*(bounds: Rectangle, title: cstring, message: cstring, buttons: cstring, text: cstring, textMaxSize: int32, secretViewActive: var bool): int32 {.importc: "GuiTextInputBox".}
  ## Text Input Box control, ask for text, supports secret
proc guiColorPicker*(bounds: Rectangle, text: cstring, color: var Color): int32 {.importc: "GuiColorPicker".}
  ## Color Picker control (multiple color controls)
proc guiColorPanel*(bounds: Rectangle, text: cstring, color: var Color): int32 {.importc: "GuiColorPanel".}
  ## Color Panel control
proc guiColorBarAlpha*(bounds: Rectangle, text: cstring, alpha: var float32): int32 {.importc: "GuiColorBarAlpha".}
  ## Color Bar Alpha control
proc guiColorBarHue*(bounds: Rectangle, text: cstring, value: var float32): int32 {.importc: "GuiColorBarHue".}
  ## Color Bar Hue control
proc guiColorPickerHSV*(bounds: Rectangle, text: cstring, colorHsv: var Vector3): int32 {.importc: "GuiColorPickerHSV".}
  ## Color Picker control that avoids conversion to RGB on each call (multiple color controls)
proc guiColorPanelHSV*(bounds: Rectangle, text: cstring, colorHsv: var Vector3): int32 {.importc: "GuiColorPanelHSV".}
  ## Color Panel control that returns HSV color value, used by GuiColorPickerHSV()

{.pop.} # not cdecl, not #include "raygui.h"

{.push callconv: cdecl, header: "gui_window_file_dialog.h".}

proc initGuiWindowFileDialogPriv(initPath: cstring): GuiWindowFileDialogState {.importc: "InitGuiWindowFileDialog"}
proc guiWindowFileDialog*(state: var GuiWindowFileDialogState) {.importc: "GuiWindowFileDialog"}

{.pop.} # not cdecl, not #include "gui_window_file_dialog.h"

## returns a vector of rectangle's x and y
func pos*(r: Rectangle): Vector2 {.inline.} =
  result = Vector2(x: r.x, y: r.y)

## returns a vector of rectangle's width and height
func size*(r: Rectangle): Vector2 {.inline.} =
  result = Vector2(x: r.width, y: r.height)

## center coordinate
func center*(r: Rectangle): Vector2 =
  result = Vector2(x: r.x + r.width / 2.0, y: r.y + r.height / 2.0)

## bottom right coordinate
func br*(r: Rectangle): Vector2 =
  result = r.pos() + r.size()

## rectangle constructor using two vectors
func Rectangle*(pos: Vector2; size: Vector2): Rectangle =
  result = Rectangle(x: pos.x, y: pos.y, width: size.x, height: size.y)

## returns a rectangle with r's position, and everything else 0'd
func ipos*(r: Rectangle): Rectangle {.inline.} =
  result = Rectangle(x: r.x, y: r.y, width: 0, height: 0)

## returns a rectangle with r's size, and everything else 0'd
func isize*(r: Rectangle): Rectangle {.inline.} =
  result = Rectangle(x: 0, y: 0, width: r.width, height: r.height)

## returns a vector with v's x, and everything else 0'd
func ix*(v: Vector2): Vector2 = 
  result = Vector2(y: 0, x: v.x)

## returns a vector with v's y, and everything else 0'd
func iy*(v: Vector2): Vector2 = 
  result = Vector2(x: 0, y: v.y)

## returns a rectangle with r's x, and everything else 0'd
func ix*(r: Rectangle): Rectangle =
  result = Rectangle(x: r.x, y: 0, width: 0, height: 0)

## returns a rectangle with r's y, and everything else 0'd
func iy*(r: Rectangle): Rectangle =
  result = Rectangle(x: 0, y: r.y, width: 0, height: 0)

## returns a rectangle with r's width, and everything else 0'd
func iwidth*(r: Rectangle): Rectangle =
  result = Rectangle(x: 0, y: 0, width: r.width, height: 0)

## returns a rectangle with r's height, and everything else 0'd
func iheight*(r: Rectangle): Rectangle =
  result = Rectangle(x: 0, y: 0, width: 0, height: r.height)

## returns a new rectangle with specified x and everything else 0'd
func rx*(x: float): Rectangle =
  result = Rectangle(x: x, y: 0, width: 0, height: 0)

## returns a new rectangle with specified y and everything else 0'd
func ry*(y: float): Rectangle =
  result = Rectangle(y: y, x: 0, width: 0, height: 0)

## returns a new rectangle with specified width and everything else 0'd
func rwidth*(width: float): Rectangle =
  result = Rectangle(width: width, x: 0, y: 0, height: 0)

## returns a new rectangle with specified pos and everything else 0'd
func rheight*(height: float): Rectangle =
  result = Rectangle(height: height, x: 0, y: 0, width: 0)

func rpos*(pos: Vector2): Rectangle =
  result = Rectangle(x: pos.x, y: pos.y, width: 0, height: 0)

## returns a new rectangle with specified size and everything else 0'd
func rsize*(size: Vector2): Rectangle =
  result = Rectangle(x: 0, y: 0, width: size.x, height: size.y)

## returns a resized rectangle with padding removed
func padding*(r: Rectangle, p: float): Rectangle = 
  result = Rectangle(x: r.x + p, y: r.y + p, width: r.width - p * 2.0, height: r.height - p * 2.0)

func `/`*[T: SomeNumber](r: Rectangle, d: T): Rectangle =
  result = Rectangle(x: r.x / d, y: r.y / d, width: r.width / d, height: r.height / d)

func `*`*[T: SomeNumber](r: Rectangle, d: T): Rectangle =
  result = Rectangle(x: r.x * d, y: r.y * d, width: r.width * d, height: r.height * d)

func `+`*[T: SomeNumber](r: Rectangle, d: T): Rectangle =
  result = Rectangle(x: r.x + d, y: r.y + d, width: r.width + d, height: r.height + d)

func `-`*[T: SomeNumber](r: Rectangle, d: T): Rectangle =
  result = Rectangle(x: r.x - d, y: r.y - d, width: r.width - d, height: r.height - d)

func `/`*(r: Rectangle, other: Rectangle): Rectangle =
  result = Rectangle(x: r.x / other.x, y: r.y / other.y, width: r.width / other.width, height: r.height / other.height)

func `*`*(r: Rectangle, other: Rectangle): Rectangle =
  result = Rectangle(x: r.x * other.x, y: r.y * other.y, width: r.width * other.width, height: r.height * other.height)

func `+`*(r: Rectangle, other: Rectangle): Rectangle =
  result = Rectangle(x: r.x + other.x, y: r.y + other.y, width: r.width + other.width, height: r.height + other.height)

func `-`*(r: Rectangle, other: Rectangle): Rectangle =
  result = Rectangle(x: r.x - other.x, y: r.y - other.y, width: r.width - other.width, height: r.height - other.height)

func splitWidth*(r: Rectangle): Rectangle = 
  return Rectangle(x: r.x, y: r.y, width: r.width / 2, height: r.height)

func splitHeight*(r: Rectangle): Rectangle = 
  return Rectangle(x: r.x, y: r.y, width: r.width, height: r.height / 2)

proc getScreenRect*(): Rectangle {.inline.} = 
  result = Rectangle(x: 0, y: 0, width: getScreenWidth().toFloat(), height: getScreenHeight().toFloat())
proc setFilterExt*(g: var GuiWindowFileDialogState; filter: string) =
  zeroMem(g.filterExt[0].addr.pointer, g.filterExt.len())
  copyMem(g.filterExt[0].addr.pointer, filter.cstring, filter.len())

proc setDirPath*(g: var GuiWindowFileDialogState; path: string) =
  zeroMem(g.dirPathText[0].addr.pointer, g.filterExt.len())
  copyMem(g.dirPathText[0].addr.pointer, path.cstring, path.len())

proc getFullPath*(g: var GuiWindowFileDialogState): string =
  result = $cast[cstring](addr g.dirPathText[0]) / 
           $cast[cstring](addr g.fileNameText[0])

proc initGuiWindowFileDialog*(initPath: string): GuiWindowFileDialogState = 
  result = initGuiWindowFileDialogPriv(initPath.cstring)

proc guiGetStyle*(control: GuiControl; property: GuiControlProperty): int32 =
  result = guiGetStylePriv(control.int32, property.int32)

proc guiSetStyle*(control: GuiControl; property: GuiControlProperty, value: int32) =
  guiSetStylePriv(control.int32, property.int32, value)

proc guiButton*(bounds: Rectangle; text: string): bool =
  result = guiButtonPriv(bounds, text.cstring).bool

proc guiGetState*(): GuiState =
  return GuiState guiGetStatePriv()
# quality of life
proc setWindowPosition*(pos: Vector2) = 
  setWindowPosition(pos.x.int32, pos.y.int32)

proc initWindow*(pos: Vector2; title: string) = 
  initWindow(pos.x.int32, pos.y.int32, title)

proc loadRenderTexture*(size: Vector2): RenderTexture =
  return loadRenderTexture(size.x.int32, size.y.int32)

proc guiComboBoxEnum*[T: enum](bounds: Rectangle, active: var T): T =
  var i = active.int32
  var formatStr = ""
  for x in T.items():
    formatStr.add(x.repr)
    formatStr.add(';')
  result = guiComboBox(bounds, formatStr.cstring, i).T
  active = result

# proc guiDropDownBoxEnum[T: enum](bounds: Rectangle, active: var T): T =
#   var i = active.int32
#   var formatStr = ""
#   for x in T.items():
#     formatStr.add(x.repr)
#     formatStr.add(';')
#   result = guiDropDownBox(bounds, formatStr.cstring, i).T
#   active = result

template tooltip*(bounds: Rectangle; text: string; body: untyped) =
  guiSetTooltip(text.cstring)
  if checkCollisionPointRec(getMousePosition(), bounds):
    guiEnableTooltip()
  body
  guiDisableTooltip()

## applies the style to the body, and restores the previous style
template pushStyle*(control: GuiControl; property: GuiControlProperty; value: int32; body: untyped) =
  let prevValue = guiGetStyle(control, property)
  guiSetStyle(control, property, value)
  body
  guiSetStyle(control, property, prevValue)

## disables the gui except for whatever is in the body if the condition provided is true
template isolateGuiIf*(cond: bool, body: untyped) =
  guiEnable()
  body
  if cond:
    guiDisable()

template scissorModeRect*(r: Rectangle, body: untyped) =
  beginScissorMode(r.x.int32, r.y.int32, r.width.int32, r.height.int32)
  body
  endScissorMode()